import { Request, Response } from 'express';
import { NotificationService, NotificationData } from '../services/notificationService';
import { z } from 'zod';

// Schema de valida√ß√£o para cria√ß√£o de notifica√ß√£o
const createNotificationSchema = z.object({
  tipo: z.string().default('Sistema'),
  titulo: z.string().min(1).max(100),
  mensagem: z.string().min(1).max(500),
  dados_extras: z.any().optional(),
});

// Schema de valida√ß√£o para busca de notifica√ß√µes
const getNotificationsSchema = z.object({
  limit: z.coerce.number().min(1).max(100).default(20),
  offset: z.coerce.number().min(0).default(0),
  onlyUnread: z.boolean().default(false),
  tipo: z.string().optional(),
});

export class NotificationsController {
  /**
   * Criar uma nova notifica√ß√£o
   */
  static async createNotification(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const validation = createNotificationSchema.safeParse(req.body);
      if (!validation.success) {
        return res.status(400).json({ 
          success: false, 
          error: { message: 'Dados inv√°lidos', details: validation.error.errors } 
        });
      }

      const notificationData: NotificationData = {
        id_usuario: req.user?.id!,
        tipo: validation.data.tipo,
        titulo: validation.data.titulo,
        mensagem: validation.data.mensagem,
        dados_extras: validation.data.dados_extras,
      };

      const notification = await NotificationService.createNotification(notificationData);

      return res.status(201).json({
        success: true,
        data: notification,
        message: 'Notifica√ß√£o criada com sucesso'
      });

    } catch (error: any) {
      console.error('Erro ao criar notifica√ß√£o:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }

  /**
   * Buscar notifica√ß√µes do usu√°rio
   */
  static async getNotifications(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const validation = getNotificationsSchema.safeParse(req.query);
      if (!validation.success) {
        return res.status(400).json({ 
          success: false, 
          error: { message: 'Par√¢metros inv√°lidos', details: validation.error.errors } 
        });
      }

      const { limit, offset, onlyUnread, tipo } = validation.data;

      const notifications = await NotificationService.getUserNotifications(req.user?.id, {
        limit: Number(limit),
        offset: Number(offset),
        onlyUnread: Boolean(onlyUnread),
        tipo,
      });

      const unreadCount = await NotificationService.getUnreadCount(req.user?.id);

      return res.json({
        success: true,
        data: {
          notifications,
          pagination: {
            limit,
            offset,
            total_unread: unreadCount,
          },
          filters: {
            only_unread: onlyUnread,
            tipo: tipo || null,
          }
        }
      });

    } catch (error: any) {
      console.error('Erro ao buscar notifica√ß√µes:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }

  /**
   * Marcar notifica√ß√£o como lida
   */
  static async markAsRead(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const { id } = req.params;

      if (!id) {
        return res.status(400).json({ 
          success: false, 
          error: { message: 'ID da notifica√ß√£o √© obrigat√≥rio' } 
        });
      }

      const success = await NotificationService.markAsRead(id, req.user?.id);

      if (!success) {
        return res.status(404).json({ 
          success: false, 
          error: { message: 'Notifica√ß√£o n√£o encontrada' } 
        });
      }

      return res.json({
        success: true,
        message: 'Notifica√ß√£o marcada como lida'
      });

    } catch (error: any) {
      console.error('Erro ao marcar notifica√ß√£o como lida:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }

  /**
   * Marcar todas as notifica√ß√µes como lidas
   */
  static async markAllAsRead(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const updatedCount = await NotificationService.markAllAsRead(req.user?.id);

      return res.json({
        success: true,
        data: {
          updated_count: updatedCount,
        },
        message: `${updatedCount} notifica√ß√µes marcadas como lidas`
      });

    } catch (error: any) {
      console.error('Erro ao marcar todas as notifica√ß√µes como lidas:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }

  /**
   * Obter contagem de notifica√ß√µes n√£o lidas
   */
  static async getUnreadCount(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const unreadCount = await NotificationService.getUnreadCount(req.user?.id);

      return res.json({
        success: true,
        data: {
          unread_count: unreadCount,
        }
      });

    } catch (error: any) {
      console.error('Erro ao obter contagem de notifica√ß√µes n√£o lidas:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }

  /**
   * Deletar notifica√ß√£o
   */
  static async deleteNotification(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const { id } = req.params;

      if (!id) {
        return res.status(400).json({ 
          success: false, 
          error: { message: 'ID da notifica√ß√£o √© obrigat√≥rio' } 
        });
      }

      const success = await NotificationService.deleteNotification(id, req.user?.id);

      if (!success) {
        return res.status(404).json({ 
          success: false, 
          error: { message: 'Notifica√ß√£o n√£o encontrada' } 
        });
      }

      return res.json({
        success: true,
        message: 'Notifica√ß√£o deletada com sucesso'
      });

    } catch (error: any) {
      console.error('Erro ao deletar notifica√ß√£o:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }

  /**
   * Processar notifica√ß√µes autom√°ticas
   */
  static async processAutomaticNotifications(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const result = await NotificationService.processAutomaticNotifications(req.user?.id);

      return res.json({
        success: true,
        data: result,
        message: `${result.total_created} notifica√ß√µes autom√°ticas criadas`
      });

    } catch (error: any) {
      console.error('Erro ao processar notifica√ß√µes autom√°ticas:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }

  /**
   * Gerar notifica√ß√£o de teste
   */
  static async generateTestNotification(req: Request & { userId?: string }, res: Response) {
    try {
      if (!req.user?.id) {
        return res.status(401).json({ success: false, error: { message: 'Usu√°rio n√£o autenticado' } });
      }

      const testNotification = await NotificationService.createNotification({
        id_usuario: req.user?.id,
        tipo: 'Sistema', // Alterado para um tipo v√°lido do enum
        titulo: 'üß™ Notifica√ß√£o de Teste',
        mensagem: 'Esta √© uma notifica√ß√£o de teste para verificar o funcionamento do sistema.',
        dados_extras: {
          test: true,
          timestamp: new Date().toISOString(),
        },
      });

      return res.json({
        success: true,
        data: testNotification,
        message: 'Notifica√ß√£o de teste criada com sucesso'
      });

    } catch (error: any) {
      console.error('Erro ao gerar notifica√ß√£o de teste:', error);
      return res.status(500).json({ 
        success: false, 
        error: { message: 'Erro interno do servidor' } 
      });
    }
  }
}


