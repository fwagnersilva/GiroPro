import express, { Request, Response, NextFunction } from 'express';
import helmet from 'helmet';
import compression from 'compression';
import { config } from './config';
import { errorHandler } from './middlewares/errorHandler';
import { corsMiddleware, ensureCors } from './middlewares/cors';
import logger from './utils/logger';

// Importar rotas
import authRoutes from './routes/auth';
import vehiclesRoutes from './routes/vehicles';
import journeysRoutes from './routes/journeys';
import fuelingsRoutes from './routes/fuelings';
import expensesRoutes from './routes/expenses';
import dashboardRoutes from './routes/dashboard';
import reportsRoutes from './routes/reports';
import goalsRoutes from './routes/goals';
import analyticsRoutes from './routes/analytics';
import insightsRoutes from './routes/insights';
import notificationsRoutes from './routes/notifications';

const app = express();

// ============================================
// 1. CORS - DEVE SER O PRIMEIRO MIDDLEWARE!
// ============================================
app.use(corsMiddleware);
app.use(ensureCors);

// ============================================
// 2. SEGURANÇA
// ============================================
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" },
  contentSecurityPolicy: false // Desabilita CSP para APIs
}));

// ============================================
// 3. PARSERS
// ============================================
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ============================================
// 4. COMPRESSÃO
// ============================================
app.use(compression());

// ============================================
// 5. LOGGING DE REQUISIÇÕES
// ============================================
app.use((req: Request, res: Response, next: NextFunction) => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    logger.info(`${req.method} ${req.path} - ${res.statusCode} - ${duration}ms`);
  });
  
  next();
});

// ============================================
// 6. HEALTH CHECK
// ============================================
app.get('/health', (req: Request, res: Response) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    env: config.nodeEnv,
    uptime: process.uptime()
  });
});

// ============================================
// 7. ROTAS DA API
// ============================================
const API_PREFIX = '/api/v1';

app.use(`${API_PREFIX}/auth`, authRoutes);
app.use(`${API_PREFIX}/vehicles`, vehiclesRoutes);
app.use(`${API_PREFIX}/journeys`, journeysRoutes);
app.use(`${API_PREFIX}/fuelings`, fuelingsRoutes);
app.use(`${API_PREFIX}/expenses`, expensesRoutes);
app.use(`${API_PREFIX}/dashboard`, dashboardRoutes);
app.use(`${API_PREFIX}/reports`, reportsRoutes);
app.use(`${API_PREFIX}/goals`, goalsRoutes);
app.use(`${API_PREFIX}/analytics`, analyticsRoutes);
app.use(`${API_PREFIX}/insights`, insightsRoutes);
app.use(`${API_PREFIX}/notifications`, notificationsRoutes);

// ============================================
// 8. ROTA 404
// ============================================
app.use('*', (req: Request, res: Response) => {
  res.status(404).json({
    success: false,
    message: 'Rota não encontrada',
    path: req.originalUrl
  });
});

// ============================================
// 9. ERROR HANDLER (DEVE SER O ÚLTIMO!)
// ============================================
app.use(errorHandler);

export default app;