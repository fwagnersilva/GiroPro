Guia de Contribuição do GiroPro ✨
Obrigado por considerar contribuir com o GiroPro! Este documento fornece diretrizes claras para colaboradores em potencial, garantindo um processo de desenvolvimento colaborativo e eficiente.

Código de Conduta 🤝
Ao participar deste projeto, você concorda em seguir nosso Código de Conduta. Esperamos que todos os colaboradores mantenham um ambiente respeitoso e inclusivo.

Como Contribuir 🚀
1. Reportar Bugs 🐞
Se você encontrou um bug, por favor, siga estas etapas:

Verifique se já foi reportado: Procure nas Issues existentes para ver se o problema já foi identificado.

Crie uma nova Issue: Se o bug não foi reportado, abra uma nova Issue com o seguinte formato:

Título: [BUG] Breve descrição do problema

Descrição detalhada incluindo:

Passos para reproduzir o bug (quanto mais detalhado, melhor!)

Comportamento esperado vs. comportamento atual

Capturas de tela ou vídeos (se aplicável, para visualização rápida)

Informações do ambiente (OS, versão do Node.js, versão do app, etc.)

Logs de erro (se disponíveis, anexe-os!)

Exemplo de Issue de Bug:
[BUG] Dashboard não carrega dados após login

**Passos para reproduzir:**
1. Fazer login no aplicativo.
2. Navegar para o dashboard.
3. Aguardar carregamento.

**Comportamento esperado:**
Dashboard deve exibir cards com dados financeiros do usuário.

**Comportamento atual:**
Dashboard fica em loading infinito.

**Ambiente:**
- OS: Android 12
- Versão do App: 0.1.0
- Dispositivo: Samsung Galaxy S21

**Logs:**
[Anexar logs se disponíveis, ex: link para Gist ou arquivo .txt]
2. Sugerir Novas Funcionalidades ✨
Para sugerir melhorias ou novas funcionalidades, siga este processo:

Verifique o roadmap: Consulte o ROADMAP.md para ver se a funcionalidade já está planejada.

Crie uma Issue de Feature: Se a funcionalidade não está planejada, abra uma nova Issue com:

Título: [FEATURE] Breve descrição da funcionalidade

Descrição incluindo:

Problema que a funcionalidade resolve

Solução proposta

Benefícios para os usuários

Mockups ou exemplos (se aplicável, para facilitar a visualização)

Exemplo de Issue de Feature:
[FEATURE] Exportação de relatórios em PDF

**Problema:**
Usuários precisam compartilhar relatórios financeiros com contadores ou para arquivo pessoal, mas atualmente só podem visualizar na tela.

**Solução proposta:**
Adicionar um botão "Exportar PDF" nos relatórios mensais e semanais.

**Benefícios:**
- Facilita o compartilhamento de dados.
- Permite arquivo físico dos relatórios.
- Melhora a experiência do usuário.

**Mockup:**
[Anexar imagem do botão proposto ou link para um Figma/Excalidraw]
3. Processo de Desenvolvimento 👨‍💻
3.1. Configuração do Ambiente ⚙️
Faça um Fork do repositório no GitHub.

Clone seu fork localmente:

Bash

git clone https://github.com/seu-usuario/GiroPro.git
Configure o upstream para sincronizar com o repositório original:

Bash

git remote add upstream https://github.com/GiroPro/GiroPro.git
Configure o ambiente seguindo as instruções detalhadas no README.md.

3.2. Fluxo de Trabalho Git 🔄
Sincronize com o repositório original para ter a versão mais recente:

Crie uma nova branch para sua contribuição. Use nomes descritivos:

Faça suas alterações, seguindo nossas convenções de código.

Teste suas alterações localmente (muito importante!).

Commit suas alterações com mensagens claras e descritivas:

3.3. Convenções de Commit 💬
Utilizamos o padrão . Alguns exemplos comuns:

feat: Adiciona uma nova funcionalidade

fix: Corrige um bug (ex: fix: corrige bug no cálculo de lucro)

docs: Atualiza a documentação (ex: docs: atualiza documentação da API)

style: Corrige formatação, sem alteração de código (ex: style: corrige formatação do código)

refactor: Refatora código sem alterar comportamento (ex: refactor: refatora componente de dashboard)

test: Adiciona ou corrige testes (ex: test: adiciona testes para jornadas)

chore: Atualiza dependências ou outras tarefas de build (ex: chore: atualiza dependências)

4. Padrões de Código 📐
4.1. TypeScript 🟦
Uso obrigatório de TypeScript em todo o código.

Tipagem explícita sempre que possível.

Evite any – use tipos específicos ou unknown.

4.2. Nomenclatura 🏷️
Variáveis e funções: camelCase (ex: calcularTotal)

Classes e componentes: PascalCase (ex: DashboardComponent)

Constantes globais: UPPER_SNAKE_CASE (ex: MAX_ITEMS)

Arquivos: kebab-case para componentes (ex: dashboard-card.tsx), snake_case para modelos (ex: user_model.ts)

4.3. Estrutura de Arquivos 📂
Backend:

Frontend:

4.4. Linting e Formatação 🧹
Antes de fazer commit, execute os seguintes comandos para garantir a padronização:

5. Testes ✅
5.1. Requisitos de Teste 📝
Novas funcionalidades devem incluir testes.

Correções de bugs devem incluir testes que reproduzam o bug para evitar regressões futuras.

Almejamos uma cobertura mínima de 70% para novas funcionalidades.

5.2. Executando Testes 🏃‍♀️
Para rodar os testes localmente:

5.3. Tipos de Teste 🧪
Unitários: Testam funções e componentes isoladamente.

Integração: Testam a interação entre diferentes módulos.

E2E (End-to-End): Testam fluxos completos do usuário (para funcionalidades críticas).

6. Pull Request (PR) ⬆️
6.1. Antes de Abrir o PR ✍️
Sincronize sua branch com a main para evitar conflitos:

Execute todos os testes e garanta que passem.

Execute o linter e corrija todos os problemas.

Teste manualmente suas alterações para garantir que tudo funciona como esperado.

6.2. Criando o PR 🚀
Push sua branch para seu fork no GitHub:

Abra um Pull Request no GitHub com:

Título claro seguindo o padrão de commits.

Descrição detalhada incluindo:

O que foi alterado e por quê.

Como testar as alterações (passos simples e claros).

Screenshots/GIFs (se aplicável, para demonstração visual).

Referências a Issues (ex: Closes #123, Fixes #456).

Template de PR:
6.3. Processo de Revisão 🔍
Revisão automática: GitHub Actions executará testes e linting automaticamente.

Revisão manual: Mantenedores revisarão seu código com atenção.

Feedback: Esteja aberto a sugestões e faça as alterações solicitadas.

Aprovação: Após a aprovação, seu PR será merged! 🎉

7. Configuração de Desenvolvimento 🛠️
7.1. Variáveis de Ambiente 🔑
Backend (.env):

Frontend (.env):

7.2. Banco de Dados 🗄️
Para desenvolvimento, recomendamos usar Docker para o banco de dados:

docker-compose.yml:

Para iniciar o banco de dados:

8. Debugging 🐛
8.1. Backend 💻
Use o VS Code com a extensão Node.js para depuração:

.vscode/launch.json:

8.2. Frontend 📱
Utilize o Flipper ou React Native Debugger para depurar o React Native.

9. Recursos Úteis 📚





10. Dúvidas e Suporte 🙋‍♀️
Issues: Para bugs e sugestões de funcionalidades.

Discussions: Para perguntas gerais e discussões com a comunidade.

Email: [Seu email de contato]

Obrigado! Sua contribuição é muito valiosa para o crescimento do GiroPro. Juntos, podemos criar uma ferramenta que realmente ajude motoristas de aplicativo a gerenciar melhor suas finanças!
