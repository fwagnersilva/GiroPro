# 🤝 Guia de Contribuição do GiroPro ✨

Obrigado por considerar contribuir com o GiroPro! Este documento traz diretrizes claras para colaboradores, garantindo um processo colaborativo e eficiente.

## 📜 Código de Conduta

Ao participar, você concorda em seguir nosso **[Código de Conduta](CODE_OF_CONDUCT.md)**. Queremos um ambiente respeitoso e inclusivo para todos.

## 🚀 Como Contribuir

### 1. 🐞 Reportar Bugs

Se você encontrou um bug, siga estas etapas para reportá-lo:

*   **Cheque se já foi reportado:** Antes de criar uma nova Issue, verifique as **Issues existentes** para evitar duplicidade.
*   **Crie uma nova Issue:** Se o bug ainda não foi reportado, crie uma nova Issue seguindo o formato abaixo:

```markdown
[BUG] Dashboard não carrega dados após login

**Passos para reproduzir:**
1. Fazer login no app.
2. Navegar para o dashboard.
3. Aguardar carregamento.

**Comportamento esperado:**
Dashboard mostra os cards com dados financeiros.

**Comportamento atual:**
Fica em loading infinito.

**Ambiente:**
- OS: Android 12
- Versão do App: 0.1.0
- Dispositivo: Samsung Galaxy S21

**Logs:**
[Anexar logs ou links, ex: Gist]
```

### 2. ✨ Sugerir Novas Funcionalidades

Quer sugerir uma melhoria ou nova funcionalidade? Siga estas diretrizes:

*   **Cheque o roadmap:** Consulte o arquivo `ROADMAP.md` para ver se a funcionalidade já está planejada.
*   **Abra uma Issue de Feature:** Se a funcionalidade não estiver no roadmap, abra uma nova Issue de Feature com o seguinte formato:

```markdown
[FEATURE] Exportação de relatórios em PDF

**Problema:**
Usuários querem compartilhar relatórios, mas só podem visualizar.

**Solução proposta:**
Adicionar botão "Exportar PDF" nos relatórios mensais e semanais.

**Benefícios:**
- Compartilhamento fácil.
- Arquivo físico.
- Melhor experiência.

**Mockup:**
[Anexar imagem ou link para protótipo]
```

### 3. 👨‍💻 Processo de Desenvolvimento

#### 3.1 ⚙️ Configuração do Ambiente

Para configurar seu ambiente de desenvolvimento, siga estes passos:

*   Faça **fork** do repositório no GitHub.
*   Clone seu fork localmente:

```bash
git clone https://github.com/seu-usuario/GiroPro.git
```

*   Configure o `upstream` para sincronizar com o repositório original:

```bash
git remote add upstream https://github.com/GiroPro/GiroPro.git
```

*   Siga as instruções detalhadas no `README` para configurar o ambiente de desenvolvimento.

#### 3.2 🔄 Fluxo de Trabalho Git

Utilize o seguinte fluxo de trabalho Git para suas contribuições:

*   Sempre **sincronize com o `upstream`** para pegar as atualizações mais recentes:

```bash
git fetch upstream
git checkout main
git merge upstream/main
```

*   Crie **branches descritivas** para suas tarefas:

```bash
git checkout -b feat/nova-funcionalidade
```

*   Faça **commits claros e atômicos**, testando tudo localmente antes de enviar suas alterações.

#### 3.3 💬 Convenções de Commit

Use os **prefixes padrão** para suas mensagens de commit:

*   `feat`: para **funcionalidades** novas
*   `fix`: para **correções** de bugs
*   `docs`: para alterações na **documentação**
*   `style`: para **formatação** de código sem alterar a lógica
*   `refactor`: para **refatoração** de código
*   `test`: para adição ou modificação de **testes**
*   `chore`: para **atualizações de build/dependências** ou tarefas de manutenção

### 4. 📐 Padrões de Código

#### 4.1 🟦 TypeScript

*   Utilize **tipagem explícita** sempre que possível.
*   **Evite** o uso de `any`.

#### 4.2 🏷️ Nomenclatura

Siga as convenções de nomenclatura:

*   **Variáveis e funções:** `camelCase`
*   **Classes/componentes:** `PascalCase`
*   **Constantes globais:** `UPPER_SNAKE_CASE`
*   **Arquivos:**
    *   **componentes:** `kebab-case`
    *   **modelos:** `snake_case`

#### 4.3 📂 Estrutura de Arquivos

(A estrutura de arquivos é detalhada no `README.md` principal do projeto.)
#### 4.4 🧹 Linting e Formatação

Antes de realizar o commit, execute os seguintes comandos para garantir a qualidade do código:

```bash
npm run lint
npm run format
```

### 5. ✅ Testes

#### 5.1 📝 Requisitos

*   Novas features e correções de bugs **devem ter testes** correspondentes.
*   A **cobertura mínima** de testes é de `70%`.

#### 5.2 🏃‍♀️ Rodando Testes

Para rodar os testes, utilize o comando:

```bash
npm run test
```

#### 5.3 🧪 Tipos de Testes

Nós utilizamos os seguintes tipos de testes:

*   **Unitários**
*   **Integração**
*   **E2E** (End-to-End)

### 6. ⬆️ Pull Request (PR)

#### 6.1 ✍️ Antes de abrir um PR

Antes de abrir seu Pull Request, certifique-se de:

*   **Sincronizar** sua branch com a `main`.
*   **Rodar testes e lint** localmente.
*   **Testar manualmente** suas alterações.

#### 6.2 🚀 Criando um PR

Para criar um Pull Request, siga estes passos:

*   Faça o **push** da sua branch para o seu fork.
*   Abra um PR no GitHub com as seguintes informações:
    *   **Título claro** (seguindo o padrão de commits).
    *   **Descrição** detalhada do que mudou e por quê.
    *   **Como testar** as alterações.
    *   **Screenshots/GIFs** se aplicável.
    *   **Referência a Issues** relacionadas.

#### 6.3 🔍 Revisão do PR

O processo de revisão inclui:

*   **Testes e lint automáticos**.
*   **Revisão manual** pelos mantenedores.
*   Esteja **aberto a feedback** e discussões.

Após a aprovação, seu PR será mergeado 🎉

### 7. 🛠️ Configuração de Desenvolvimento

#### 7.1 🔑 Variáveis de Ambiente

*   **Backend:** Utilize o arquivo `.env`.
*   **Frontend:** Utilize o arquivo `.env`.

#### 7.2 🗄️ Banco de Dados

É **recomendado** o uso de Docker para o banco de dados:

*   Utilize o arquivo `docker-compose.yml`.
*   Para iniciar o banco de dados, execute:

```bash
docker-compose up -d
```

### 8. 🐛 Debugging

#### 8.1 💻 Backend

Para depurar o backend, utilize o **VS Code** com a extensão **Node.js Debug**.

#### 8.2 📱 Frontend

Para depurar o frontend, utilize **Flipper** ou **React Native Debugger**.


### 10. 🙋‍♀️ Dúvidas e Suporte

Para dúvidas e suporte, utilize os seguintes canais:

*   **Issues** para bugs e sugestões
*   **Discussions** para dúvidas gerais
*   **Email: `fwagnersilva@gmail.com`
